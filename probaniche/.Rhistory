Mpred
Mpred
pLMseq = denom(x=t,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
Mpred
Mprey
denom(x=-0.9,Mpred=0.1,meanMprey,sdMprey,a0,a1,b0,b1,h)
denom(x=Mprey,Mpred=Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)
pLMseq = pLM_fn(Mprey=t,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)
pLMseq
range(pLMseq)
plot(t,pLMseq,type = "l")
lines(t,pMseq,col = "red")
pMseq = dnorm(x=t, mean = meanMprey,sd = sdMprey)
lines(t,pMseq,col = "red")
lines(t,pLMseq*pMseq,col = "blue")
Mprey
Mpred
pLM_fn(Mprey=-0.9,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)
pLM_fn(Mprey=-0.9,Mpred=0.1,a0=a0,a1=a1,b0=b0,b1=b1,h=h)
h
o = a0 + a1*Mpred#
	r = b0 + b1*Mpred
o
r
dnorm(x = Mprey, mean = o, sd = r)
M = expand.grid(seq(-2,2,0.1),seq(-2,2,0.1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -1#
a1 = 1#
b0 = 0.2#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,o,type = "l")
abline(0,1)
plot(pred,r,type = "l")
rm(list = ls())#
M = expand.grid(seq(0,1000,1),seq(0,1000,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = 10#
a1 = 1#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
rm(list = ls())#
M = expand.grid(seq(0,1000,1),seq(0,1000,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = 10#
a1 = 10#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,0)
plot(pred,o)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = 10#
a1 = 10#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,o,type = "l")
abline(0,1)
h = 0.5#
a0 = 10#
a1 = 0.5#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,o,type = "l")
abline(0,1)
a0 = -5#
a1 = 0.5#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,o,type = "l")
abline(0,1)
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
b0 = 100#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
b0 = 20#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
b0 = 20#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
h = 0.5#
a0 = -5#
a1 = 0.5#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
pLM
range(o)
range(prey)
range(pred)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -5#
a1 = 0.75#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred
plot(pred,o,type = "l")
abline(0,1)
lines(pred,o-r,col = "red")
lines(pred,o+r,col = "red")
a0 = -10#
a1 = 0.75#
b0 = 20#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19)#
abline(0,1)
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))
abline(0,1)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 30#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(o-prey,r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
pLM = h*dnorm(x=prey,mean=0,,sd=r)
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(x=prey,mean=0,,sd=r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
pLM = h*dnorm(x=prey,mean=0,sd=r)
pLM
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(x=prey,mean=0,sd=r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
range(pLM)
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(x=prey,mean=o,sd=r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
pLM
range(pLM)
hist(pLM)
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 20#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*dnorm(x=prey,mean=o,sd=r)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
hist(pLM)
range(r)
dnorm(x=prey,mean=o,sd=r)
dnorm(x=prey[1],mean=o[1],sd=r)
dnorm(x=prey[1],mean=o[1],sd=20)
dnorm(x=prey[1],mean=o[1],sd=30)
pLM = h*exp(-(o-prey)^2/2/r^2)
pLM
hist(pLM)
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*exp(-(o-prey)^2/2/r^2)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
L
rand
nrow(M)
rand = runif(nrow(M),0,1)
dim(M)
nrow(M)
rand = runif(nrow(M),0,1)
length(rand)
rand = runif(nrow(M),0,1)
L[pLM > rand] = 1
length(pLM)
length(0)
length(o)
length(r)
length(prey)
dim(M)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 20#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*exp(-(o-prey)^2/2/r^2)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*exp(-(o-prey)^2/2/r^2)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
dim(M)
#######################
# The model#
model = function(X,M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = M[X,1]#
	Mpred = M[X,2]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
#model(X=1,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
#
#T = as.matrix(c(1:127),nc = 1)#
#res=apply(T,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
#
test = matrix(nr=127,nc=4) #
for(i in 1:127)  {#
#
	Mprey = M[i,1]#
	Mpred = M[i,2]	#
	test[i,1] = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
	test[i,2] = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)	#
	test[i,3] = as.numeric(pL_fn(Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h))#
}
#######################
# The conditional probability function#
pLM_fn = function(Mprey,Mpred,a0,a1,b0,b1,h) {#
	o = a0 + a1*Mpred#
	r = b0 + b1*Mpred#
	h*dnorm(x = Mprey, mean = o, sd = r)#
}#
#
#######################
# Denominator#
denom = function(x,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) pLM_fn(Mprey=x,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)*dnorm(x=x,mean=meanMprey,sd=sdMprey)#
#######################
# The marginal probability function#
pL_fn = function(Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) integrate(f=denom,lower=-Inf,upper=Inf,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h,meanMprey=meanMprey,sdMprey=sdMprey)[1]	#
#
#######################
# The model#
model = function(X,M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = M[X,1]#
	Mpred = M[X,2]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
#model(X=1,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
#
#T = as.matrix(c(1:127),nc = 1)#
#res=apply(T,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
#
test = matrix(nr=127,nc=4) #
for(i in 1:127)  {#
#
	Mprey = M[i,1]#
	Mpred = M[i,2]	#
	test[i,1] = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
	test[i,2] = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)	#
	test[i,3] = as.numeric(pL_fn(Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h))#
}
test
test[,4] = (test[,1]*test[,2])/test[,3]
which.max(test[,4])
test[44,]
T = as.matrix(c(1:127),nc = 1)#
res=apply(T,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)
res
T = as.matrix(c(1:nrow(M)),nc = 1)
res=apply(T,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)
res
dim(M)
hist(M)
hist(res)
# PDF
PDF = function(pML) log(pML)
PDF(res)
sum(PDF(res))
getwd()
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = -100, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(M = "M") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(M = M)#
#
# Maximum likelihood estimation
#######################
# Generate fake data#
rm(list = ls())#
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*exp(-(o-prey)^2/2/r^2)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)#
#
#######################
# The conditional probability function#
pLM_fn = function(Mprey,Mpred,a0,a1,b0,b1,h) {#
	o = a0 + a1*Mpred#
	r = b0 + b1*Mpred#
	h*dnorm(x = Mprey, mean = o, sd = r)#
}#
#
#######################
# Denominator#
denom = function(x,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) pLM_fn(Mprey=x,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)*dnorm(x=x,mean=meanMprey,sd=sdMprey)#
#######################
# The marginal probability function#
pL_fn = function(Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) integrate(f=denom,lower=-Inf,upper=Inf,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h,meanMprey=meanMprey,sdMprey=sdMprey)[1]	#
#
#######################
# The model#
model = function(X,M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = M[X,1]#
	Mpred = M[X,2]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
wrapper = function(M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:nrow(M)),nc = 1)#
	apply(X,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}#
#
# PDF#
PDF = function(pML) log(pML)#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = -100, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(M = "M") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(M = M)#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "D", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)#
pred = model(a0 = test$best_pars[[1]],a1 = test$best_pars[[2]], X = data$X)
M
data
data$M
data = data.frame(M = M,bidon = 0)
data$M
X = c(1:100)#
a0 = -15#
a1 = 0.25#
p = exp(a0 + a1*X)/(1 + exp(a0 + a1*X))#
plot(X,p,type = "l",ylim = c(0,1))#
D = numeric(100)#
rand = runif(100,0,1)#
D[rand<p] = 1#
points(X,D,pch = 19)#
data = data.frame(X = X, D = D)
data$X
,bidon = 0
data = list(M = M)
data$M
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "D", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
model = function(X,M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = M[X,1]#
	Mpred = M[X,2]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
wrapper = function(M,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:nrow(M)),nc = 1)#
	apply(X,MARGIN=1,FUN=model,M=M,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}#
#
# PDF#
PDF = function(pML) log(pML)
#######################
# The model#
model = function(X,prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = prey[X,1]#
	Mpred = pred[X,2]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
wrapper = function(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:nrow(M)),nc = 1)#
	apply(X,MARGIN=1,FUN=modelprey,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}#
#
# PDF#
PDF = function(pML) log(pML)
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = -100, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(prey = "prey",pred = "pred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(prey = M[,1], pred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "D", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF,
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
wrapper = function(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:nrow(M)),nc = 1)#
	apply(X,MARGIN=1,FUN=model,prey,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}#
#
# PDF#
PDF = function(pML) log(pML)#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = -100, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(prey = "prey",pred = "pred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(prey = M[,1], pred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
wrapper(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
X = as.matrix(c(1:nrow(M)),nc = 1)
wrapper = function(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:length(prey)),nc = 1)#
	apply(X,MARGIN=1,FUN=model,prey,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}
wrapper(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
prey
X = as.matrix(c(1:length(prey)),nc = 1)
apply(X,MARGIN=1,FUN=model,prey,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)
model(X,prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
X
model(X=1,prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
model = function(X,prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	Mprey = prey[X]#
	Mpred = pred[X]#
#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}
model(X=1,prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
apply(X,MARGIN=1,FUN = model,prey,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)
apply(X,MARGIN=1,FUN=model,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)
M = M[1:100,]
wrapper = function(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	X = as.matrix(c(1:length(prey)),nc = 1)#
	apply(X,MARGIN=1,FUN=model,prey=prey, pred=pred,meanMprey=meanMprey,sdMprey=sdMprey,a0=0,a1=a1,b0=b0,b1=b1,h=h)#
}
prey = M[,1]
pred = M[,2]
wrapper(prey,pred,meanMprey,sdMprey,a0,a1,b0,b1,h)
# PDF#
PDF = function(pML) log(pML)#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = -100, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(prey = "prey",pred = "pred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(prey = M[,1], pred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
#######################
# The conditional probability function#
pLM_fn = function(Mprey,Mpred,a0,a1,b0,b1,h) {#
	o = a0 + a1*Mpred#
#	r = b0 + b1*Mpred#
	r = b0 #
	h*dnorm(x = Mprey, mean = o, sd = r)#
}
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = 1, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(prey = "prey",pred = "pred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(prey = M[,1], pred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
u1 = a0 + a1*Mpred#
		sd1 = b0 #
		u2 = meanMprey#
		sd2 = sdMprey#
		sd1/(sd1^2+sd2p2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))
sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))
u1 = a0 + a1*Mpred
Mpred = M[,2]
u1 = a0 + a1*Mpred
sd1 = b0
u2 = meanMprey
sd2 = sdMprey
sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))
test = sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))
pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))
X
X = 1
Mprey = prey[X]
Mpred = pred[X]
pL = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))
pL
u1 = a0 + a1*Mpred#
		sd1 = b0 #
		u2 = meanMprey#
		sd2 = sdMprey#
		test = sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))
test
t1 = numeric(length(X))#
t2 = t1#
#
for(i in 1:length(X)) {#
	Mprey = prey[i]#
	Mpred = pred[i]#
	u1 = a0 + a1*Mpred#
	sd1 = b0 #
	u2 = meanMprey#
	sd2 = sdMprey#
	t1[i] = sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))#
	t2[i] = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
}
plot(t1,t2)
plot(t1,t2)
quartz()
plot(t1,t2)
t1
X
pL_fn
t1 = numeric(length(prey))#
t2 = t1#
#
for(i in 1:length(prey)) {#
	Mprey = prey[i]#
	Mpred = pred[i]#
	u1 = a0 + a1*Mpred#
	sd1 = b0 #
	u2 = meanMprey#
	sd2 = sdMprey#
	t1[i] = sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))#
	t2[i] = as.numeric(pL_fn(Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h))#
}
t1
t2
plot(t1,t2)
abline(0,1)
t1/t2
sdMprey
meanMprey
sd1
sd2
(2*pi)*sd2
h/(2*pi)*sd2
h/((2*pi)^0.5*sd2)
model = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
	# Compute the conditional#
	pLM = pLM_fn(Mprey=Mprey,Mpred=Mpred,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
#
	# Compute the marginal#
	pM = dnorm(x=Mprey, mean = meanMprey,sd = sdMprey)#
	#  Integrate the denominator#
	pL = pL_fn(Mprey=Mprey,Mpred=Mpred,meanMprey=meanMprey,sdMprey=sdMprey,a0=a0,a1=a1,b0=b0,b1=b1,h=h)#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}
model((Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h))
model(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
pL_fn = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) {	#
		u1 = a0 + a1*Mpred#
		sd1 = b0 #
		u2 = meanMprey#
		sd2 = sdMprey#
		test = sd1/(sd1^2+sd2^2)^0.5*h*exp(-(u1-u2)^2/2/(sd1^2+sd2^2))	#
}
model(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
MPrey
Mprey
Mpred
model(Mprey=M[,1],Mpred=M[,2],meanMprey,sdMprey,a0,a1,b0,b1,h)
res = model(Mprey=M[,1],Mpred=M[,2],meanMprey,sdMprey,a0,a1,b0,b1,h)
range(res)
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = 1, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(prey = "Mprey",pred = "Mpred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(Mprey = M[,1], Mpred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = wrapper, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
test = anneal(model = model, par = par, var = var, source_data = data,
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF,
max_iter = 10000, hessian = FALSE, initial_temp = 1)
var = list(Mprey = "Mprey",Mpred = "Mpred")
var = list(Mprey = "Mprey",Mpred = "Mpred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(Mprey = M[,1], Mpred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
str(data)
data$Mprey
data$Mpred
M
M = expand.grid(seq(0,100,1),seq(0,100,1))#
pred = as.matrix(M[,1])#
prey = as.matrix(M[,2])#
h = 0.5#
a0 = -10#
a1 = 0.75#
b0 = 10#
b1 = 0.0#
#
o = a0 + a1*pred#
r = b0 + b1*pred#
pLM = h*exp(-(o-prey)^2/2/r^2)#
L = numeric(nrow(M))#
rand = runif(nrow(M),0,1)#
L[pLM > rand] = 1#
#
M = M[L==1,]#
meanMprey = mean(M[,1])#
sdMprey = sd(M[,1])#
par(mar=c(5,5,2,1))#
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))#
abline(0,1)
M
mean(M[,1])
mean(M[,2])
plot(M[,1],M[,2],pch=19,ylim = c(0,100),xlim = c(0,100))
abline(0,1,col = "red")
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = 1, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list(Mprey = "Mprey",Mpred = "Mpred") #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
data = data.frame(Mprey = M[,1], Mpred = M[,2])#
#
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
model = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	# Optimum and range#
	o = a0 + a1*Mpred#
#	r = b0 + b1*Mpred#
	r = b0 	#
	# Compute the conditional#
	pLM = h*dnorm(x = Mprey, mean = o, sd = r)#
	# Compute the marginal#
	pM = dnorm(x=Mprey,mean=meanMprey,sd=sdMprey)#
	#  Integrate the denominator#
	pL = r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))	#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
# PDF#
PDF = function(pML) log(pML)
res = model(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
res
Mprey
Mprey = M[,1]
Mpred = M[,2]
res = model(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h)
res
range(res)
var = list()#
var$Mprey = "Mprey"#
var$Mpred = "Mpred" #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])
data = data.frame(Mprey = M[,1], Mpred = M[,2])
Mprey = M[,1]
Mpred = M[,2]
data = data.frame(Mprey = Mprey, Mpred = Mpred)
str(data)
data$Mprey
model = function(Mprey,Mpred,meanMprey,sdMprey,a0,a1,b0,b1,h) {#
#
	# Optimum and range#
	o = a0 + a1*Mpred#
#	r = b0 + b1*Mpred#
	r = b0 	#
	# Compute the conditional#
	pLM = h*dnorm(x = Mprey, mean = o, sd = r)#
	# Compute the marginal#
	pM = dnorm(x=Mprey,mean=meanMprey,sd=sdMprey)#
	#  Integrate the denominator#
	pL = r/(r^2+sdMprey^2)^0.5*h*exp(-(o-meanMprey)^2/2/(r^2+sdMprey^2))	#
	# Compute the posterior probability#
	pML = pLM*pM/pL#
	return(pML)		#
}#
#
# PDF#
PDF = function(pML) log(pML)#
#
#######################
# Source packages#
setwd("/Users/DGravel/Desktop/probaniche")#
source("anneal.R")#
source("likeli.R")#
source("analyze_function.R")#
source("likdisplay.R")#
#
# Initial values and controls#
par = list(a0 = a0, a1 = a1, b0 = b0, b1 = b1, h = h)#
par_lo = list(a0 = -100, a1 = 0, b0 = 1, b1 = 0, h = 0)#
par_hi = list(a0 = 100, a1 = 10, b0 = 100, b1 = 10, h = 1)#
#
var = list()#
var$Mprey = "Mprey"#
var$Mpred = "Mpred" #
var$pML = "predicted" #
var$meanMprey = mean(M[,1])#
var$sdMprey = sd(M[,1])#
#
Mprey = M[,1]#
Mpred = M[,2]#
data = data.frame(Mprey = Mprey, Mpred = Mpred)#
#
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "prey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
# Maximum likelihood estimation#
test = anneal(model = model, par = par, var = var, source_data = data, #
par_lo = par_lo, par_hi = par_hi, dep_var = "Mprey", pdf = PDF, #
max_iter = 10000, hessian = FALSE, initial_temp = 1)
